@using System;
@using Sandbox;
@using Sandbox.UI;
@inherits Panel;
@namespace TFS2.Menu
@attribute [StyleSheet]

@if (Setting == null)
	return;

<root class="control">

	@switch (Setting.DisplayType)
	{
		case GameSetting.GameSettingType.Choice:
						
			<DropDown value=@Value @ref=ChoiceDropdown ValueChanged=@Set></DropDown>
			break;

		case GameSetting.GameSettingType.Boolean:

            <checkbox @onvaluechanged=@((bool b) => Set(b ? "true" : "false")) />
			break;

		case GameSetting.GameSettingType.Integer:

			<SliderControl ShowTextEntry="@true" ShowRange="@true" Step=@(1.0f) Min=@Setting.Minimum Max=@Setting.Maximum value=@Value OnValueChanged=@( ( float f ) => Set( f.ToString() ))></SliderControl>
			break;

		case GameSetting.GameSettingType.Float:

			<SliderControl ShowTextEntry="@true" ShowRange="@true" Step=@Setting.Step Min=@Setting.Minimum Max=@Setting.Maximum value=@Value OnValueChanged=@( ( float f ) => Set( f.ToString() ))></SliderControl>
			break;

		case GameSetting.GameSettingType.String:
						
			<TextEntry value=@Value OnTextEdited=@Set></TextEntry>
			break;

		default:

			<div>Unhandled LobbyGameSetting @Setting.DisplayType</div>
			break;	
	}

</root>


@code
{
    public Action<string, string> OnChange { get; set; }

    public string Value { get; set; }
    public GameSetting Setting { get; set; }

    DropDown ChoiceDropdown;
    Checkbox BooleanCheckbox;

    void Set( string newvalue)
    {
        OnChange?.Invoke( Setting.ConVarName, newvalue );
        //Log.Info($"{Setting.ConVarName} -> {newvalue}");
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (ChoiceDropdown != null)
        {
            ChoiceDropdown.Options.Clear();

            foreach (var choice in Setting.Choices )
            {
                ChoiceDropdown.Options.Add(new Option(choice.Name, choice.Value));
            }

            ChoiceDropdown.Value = Value;
        }
        else if (BooleanCheckbox != null)
        {
            BooleanCheckbox.Checked = Value == "true";
        }
    }
}
